using System;
using System.Linq;
using System.Xml.Linq;
using System.Xml.XPath;
using IBIS.Infrastructure.Compression;
using Newtonsoft.Json.Linq;
using WebApiBia.Common.Assert;
using WebApiBia.Data.Reports.FlexService;

namespace WebApiBia.Web.Api.Core.Processors.Controllers.IBISRealTime
{
    class NodeXmlProcessor : INodeXmlProcessor
    {
        private readonly AssertUtil _assertUtil = new AssertUtil();

        public string Get(string path)
        {

            /*
               RETURN OBJECT
               {
                  links: [
                      {
                          hasMatch: true;false,
                          link_parent_relationship_path:"",
                          element: parameter/link,
                          type: IBIS.DataTypes::DataPoint/click,
                          action: jump,
                          hasData: true/false,
                          data: {
                                    data["link_map_id"] = _assertUtil.AssertIsNullOrEmptyReturnEmptyString(linkData.Attribute("link_map_id").Value);
                                    data["dp_relationship_id"] = _assertUtil.AssertIsNullOrEmptyReturnEmptyString(linkData.Attribute("dp_relationship_id").Value);
                                    data["link_to_data_id"] = _assertUtil.AssertIsNullOrEmptyReturnEmptyString(linkData.Attribute("link_to_data_id").Value);
                                    data["link_name"] = _assertUtil.AssertIsNullOrEmptyReturnEmptyString(linkData.Attribute("link_name").Value);
                                    data["link_from_relationship_path"] = _assertUtil.AssertIsNullOrEmptyReturnEmptyString(linkData.Attribute("link_from_relationship_path").Value);
                                    data["link_to_relationship_path"] = _assertUtil.AssertIsNullOrEmptyReturnEmptyString(linkData.Attribute("link_to_relationship_path").Value);
                                    data["link_relationship_id"] = _assertUtil.AssertIsNullOrEmptyReturnEmptyString(linkData.Attribute("link_relationship_id").Value);
                                    data["relationship_path"] = _assertUtil.AssertIsNullOrEmptyReturnEmptyString(linkData.Attribute("relationship_path").Value);
                                    data["parent_relationship_path"] = _assertUtil.AssertIsNullOrEmptyReturnEmptyString(linkData.Attribute("parent_relationship_path").Value);
                                    data["link_recursive"] = _assertUtil.AssertIsNullOrEmptyReturnEmptyString(linkData.Attribute("link_recursive").Value);
                                    data["LinkPathString"] = _assertUtil.AssertIsNullOrEmptyReturnEmptyString(linkData.Attribute("LinkPathString").Value);
                                }
                      }

                  ],
                  form: {
                             type: "HTMLComponent",
                             data: {
                                     path: ""
                                   },
                             dataOverride: {

                                           }
                        }
                }
            */
            JObject returnObject = new JObject();
            JArray linksArray = new JArray();


            FlexServiceSoapClient client = new FlexServiceSoapClient();
            string rawNodeXml = client.GetNodeXMLFromPath(path);
            rawNodeXml = CompressionUtil.UnCompress(rawNodeXml);

            XElement mergedXml = XElement.Parse(rawNodeXml).Element("MergeXML");

            if (mergedXml != null)
            {

                var linksFromNodeXml = mergedXml.Descendants().Where(x => x.Attribute("linkID") != null);

                string rawLinks = client.GetNodePathLinks(null, path);
                rawLinks = CompressionUtil.UnCompress(rawLinks);

                if (rawLinks != string.Empty)
                {


                    XElement rawLinksXml = XElement.Parse(rawLinks);
                    foreach (var linkFromNodeXml in linksFromNodeXml)
                    {

                        XElement linkElement = rawLinksXml
                            .Descendants()
                            .FirstOrDefault(
                                x =>
                                    x.Attribute("link_name") != null &&
                                    x.Attribute("link_name").Value == linkFromNodeXml.Attribute("linkID").Value);

                        JObject linkObj = new JObject();


                        linkObj["hasMatch"] = true;
                        linkObj["hasData"] = false;
                        linkObj["link_parent_relationship_path"] = path;
                        linkObj["element"] = linkFromNodeXml.Name.ToString();
                        linkObj["link_name"] = linkFromNodeXml.Attribute("linkID").Value;

                        if (linkElement != null)
                        {
                            linkObj["hasData"] = true;
                            JObject data = new JObject();
                            linkObj["data"] = data;

                            AddLinkData(linkElement, data);
                        }

                        linksArray.Add(linkObj);

                    }


                    foreach (var xNode in rawLinksXml.Nodes())
                    {
                        var linkNode = (XElement)xNode;
                        XElement linkFromNodeXmlElement = mergedXml
                            .Descendants()
                            .FirstOrDefault(x => x.Attribute("linkID") != null && x.Attribute("linkID").Value == linkNode.Attribute("link_name").Value);


                        if (linkFromNodeXmlElement == null)
                        {
                            JObject linkObj = new JObject();
                            linkObj["hasMatch"] = false;
                            linkObj["link_parent_relationship_path"] = path;
                            linkObj["element"] = string.Empty;
                            linkObj["link_name"] = linkNode.Attribute("link_name").Value;

                            linkObj["hasData"] = true;
                            JObject data = new JObject();
                            linkObj["data"] = data;

                            AddLinkData(linkNode, data);
                            linksArray.Add(linkObj);

                        }
                    }
                }







            }

            returnObject["links"] = linksArray;
            return returnObject.ToString();

        }

        private void AddLinkData(XElement linkNode, JObject data)
        {
            data["link_map_id"] = _assertUtil.AssertIsNullOrEmptyReturnEmptyString(linkNode.Attribute("link_map_id"));
            data["dp_relationship_id"] = _assertUtil.AssertIsNullOrEmptyReturnEmptyString(linkNode.Attribute("dp_relationship_id"));
            data["link_to_data_id"] = _assertUtil.AssertIsNullOrEmptyReturnEmptyString(linkNode.Attribute("link_to_data_id"));
            data["link_from_relationship_path"] = _assertUtil.AssertIsNullOrEmptyReturnEmptyString(linkNode.Attribute("link_from_relationship_path"));
            data["link_to_relationship_path"] = _assertUtil.AssertIsNullOrEmptyReturnEmptyString(linkNode.Attribute("link_to_relationship_path"));
            data["link_relationship_id"] = _assertUtil.AssertIsNullOrEmptyReturnEmptyString(linkNode.Attribute("link_relationship_id"));
            data["relationship_path"] = _assertUtil.AssertIsNullOrEmptyReturnEmptyString(linkNode.Attribute("relationship_path"));
            data["parent_relationship_path"] = _assertUtil.AssertIsNullOrEmptyReturnEmptyString(linkNode.Attribute("parent_relationship_path"));
            data["link_recursive"] = _assertUtil.AssertIsNullOrEmptyReturnEmptyString(linkNode.Attribute("link_recursive"));
            data["LinkPathString"] = _assertUtil.AssertIsNullOrEmptyReturnEmptyString(linkNode.Attribute("LinkPathString"));

        }
    }
}